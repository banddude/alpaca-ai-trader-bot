Getting Started
About
Alpaca-py provides an interface for interacting with the API products Alpaca offers. These API products are provided as various REST, WebSocket and SSE endpoints that allow you to do everything from streaming market data to creating your own trading apps. You can learn about the API products Alpaca offers at alpaca.markets.

Usage
Alpaca’s APIs allow you to do everything from building algorithmic trading strategies to building a full brokerage experience for your own end users. Here are some things you can do with Alpaca-py.

Market Data API: Access live and historical market data for 5000+ stocks, 20+ crypto, and options.

Trading API: Trade stock, crypto, and options with lightning fast execution speeds.

Broker API & Connect: Build investment apps - from robo-advisors to brokerages.

Installation
Alpaca-py is supported on Python 3.7+. You can install Alpaca-py using pip. To learn more about version histories, visit the PyPI page.

To install Alpaca-py, run the following pip command in your terminal.

pip install alpaca-py
Errors
Try upgrading your pip before installing if you face errors.

pip install --upgrade pip
Poetry
If you’re using poetry to manage dependencies in your project. You can add Alpaca-py to your project by running

poetry add alpaca-py
What’s New?
If you’ve used the previous python SDK alpaca-trade-api, there are a few key differences to be aware of.

Broker API
Alpaca-py lets you use Broker API to start building your investment apps! Learn more at the Broker page.

OOP Design
Alpaca-py uses a more OOP approach to submitting requests compared to the previous SDK. To submit a request, you will most likely need to create a request object containing the desired request data. Generally, there is a unique request model for each method.

Some examples of request models corresponding to methods:

GetOrdersRequest for TradingClient.get_orders()

CryptoLatestOrderbookRequest for CryptoHistoricalDataClient.get_crypto_latest_orderbook()

Request Models Usage Example

To get historical bar data for crypto, you will need to provide a CryptoBarsRequest object.

from alpaca.data.historical import CryptoHistoricalDataClient
from alpaca.data.requests import CryptoBarsRequest
from alpaca.data.timeframe import TimeFrame

# no keys required for crypto data
client = CryptoHistoricalDataClient()

request_params = CryptoBarsRequest(
                        symbol_or_symbols=["BTC/USD", "ETH/USD"],
                        timeframe=TimeFrame.Day,
                        start="2022-07-01"
                 )

bars = client.get_crypto_bars(request_params)
Data Validation
Alpaca-py uses pydantic to validate data models at run-time. This means if you are receiving request data via JSON from a client. You can handle parsing and validation through Alpaca’s request models. All request models can be instantiated by passing in data in dictionary format.

Here is a rough example of what is possible.

@app.route('/post_json', methods=['POST'])
def do_trade():
    # ...

    order_data_json = request.get_json()

    # validate data
    MarketOrderRequest(**order_data_json)

    # ...
Many Clients
Alpaca-py has a lot of client classes. There is a client for each API and even asset class specific clients (StockHistoricalDataClient, CryptoHistoricalDataClient, OptionHistoricalData). This requires you to pick and choose clients based on your needs.

Broker API: BrokerClient

Trading API: TradingClient

Market Data API: StockHistoricalDataClient, CryptoHistoricalDataClient, OptionHistoricalDataClient, CryptoDataStream, StockDataStream, OptionDataStream

API Keys
Trading and Market Data API
In order to use Alpaca’s services you’ll need to sign up for an Alpaca account and retrieve your API keys. Signing up is completely free and takes only a few minutes. Sandbox environments are available to test out the API. To use the sandbox environment, you will need to provide sandbox/paper keys. API keys are passed into Alpaca-py through either TradingClient, StockHistoricalDataClient, CryptoHistoricalDataClient, OptionHistoricalDataClient, StockDataStream, CryptoDataStream, or OptionDataStream.

Market Data
The market data API allows you to access both live and historical data for equities, cryptocurrencies, and options. Over 5 years of historical data is available for thousands of equity and cryptocurrency symbols. Various data types are available such as bars/candles (OHLCV), trade data (price and sales), and quote data. For crypto, there is also orderbook data. For more information on the data types available, please look at the API reference.

Subscription Plans
Most market data features are free to use. However, if you are a professional or institution, you may wish to expand with the unlimited plan. Learn more about the subscriptions plans at alpaca.markets/data.

API Keys
You can sign up for API keys here. API keys allow you to access stock data. Keep in mind, crypto data does not require authentication to use. i.e. you can initialize CryptoHistoricalDataClient without providing API keys. However, if you do provide API keys, your rate limit will be higher.

Historical Data
There are 2 historical data clients: StockHistoricalDataClient, CryptoHistoricalDataClient, and OptionHistoricalDataClient. The crypto data client does not require API keys to use.

Clients
Historical Data can be queried by using one of the two historical data clients: StockHistoricalDataClient, CryptoHistoricalDataClient, and OptionHistoricalDataClient. Historical data is available for Bar, Trade and Quote datatypes. For crypto, latest orderbook data is also available.

from alpaca.data import CryptoHistoricalDataClient, StockHistoricalDataClient, OptionHistoricalDataClient

# no keys required.
crypto_client = CryptoHistoricalDataClient()

# keys required
stock_client = StockHistoricalDataClient("api-key",  "secret-key")
option_client = OptionHistoricalDataClient("api-key",  "secret-key")
Retrieving Latest Quote Data
The latest quote data is available through the historical data clients. The method will return a dictionary of Trade objects that are keyed by the corresponding symbol. We will need to use the StockLatestQuoteRequest model to prepare the request parameters.

Attention

Models that are returned by both historical data clients are agnostic of the number of symbols that were passed in. This means that you must use the symbol as a key to access the data regardless of whether a single symbol or multiple symbols were queried. Below is an example of this in action.

Multi Symbol

Here is an example of submitting a data request for multiple symbols. The symbol_or_symbols parameter can accommodate both a single symbol or a list of symbols. Notice how the data for a single symbol is accessed after the query. We use the symbol we desire as a key to access the data.

from alpaca.data.historical import StockHistoricalDataClient
from alpaca.data.requests import StockLatestQuoteRequest

# keys required for stock historical data client
client = StockHistoricalDataClient('api-key', 'secret-key')

# multi symbol request - single symbol is similar
multisymbol_request_params = StockLatestQuoteRequest(symbol_or_symbols=["SPY", "GLD", "TLT"])

latest_multisymbol_quotes = client.get_stock_latest_quote(multisymbol_request_params)

gld_latest_ask_price = latest_multisymbol_quotes["GLD"].ask_price
Single Symbol

This is a similar example but for a single symbol. The key thing to notice is how we still need to use the symbol as a key to access the data we desire. This might seem odd since we only queried a single symbol. However, this must be done since the data models are agnostic to the number of symbols.

from alpaca.data.historical import CryptoHistoricalDataClient
from alpaca.data.requests import CryptoLatestQuoteRequest

# no keys required
client = CryptoHistoricalDataClient()

# single symbol request
request_params = CryptoLatestQuoteRequest(symbol_or_symbols="ETH/USD")

latest_quote = client.get_crypto_latest_quote(request_params)

# must use symbol to access even though it is single symbol
latest_quote["ETH/USD"].ask_price
Retrieving Historical Bar Data
You can request bar (candlestick) data via the HistoricalDataClients. In this example, we query daily bar data for “BTC/USD” and “ETH/USD” since July 1st 2022 using CryptoHistoricalDataClient. You can convert the response to a multi-index pandas dataframe using the .df property.

from alpaca.data.historical import CryptoHistoricalDataClient
from alpaca.data.requests import CryptoBarsRequest
from alpaca.data.timeframe import TimeFrame
from datetime import datetime

# no keys required for crypto data
client = CryptoHistoricalDataClient()

request_params = CryptoBarsRequest(
                        symbol_or_symbols=["BTC/USD", "ETH/USD"],
                        timeframe=TimeFrame.Day,
                        start=datetime(2022, 7, 1),
                        end=datetime(2022, 9, 1)
                 )

bars = client.get_crypto_bars(request_params)

# convert to dataframe
bars.df

# access bars as list - important to note that you must access by symbol key
# even for a single symbol request - models are agnostic to number of symbols
bars["BTC/USD"]
Real Time Data
Clients
The data stream clients lets you subscribe to real-time data via WebSockets. There are clients for crypto data, stock data and option data. These clients are different from the historical ones. They do not have methods which return data immediately. Instead, the methods in these clients allow you to assign methods to receive real-time data.

from alpaca.data import CryptoDataStream, StockDataStream

# keys are required for live data
crypto_stream = CryptoDataStream("api-key", "secret-key")

# keys required
stock_stream = StockDataStream("api-key", "secret-key")
option_stream = OptionDataStream("api-key", "secret-key")
Subscribing to Real-Time Quote Data
This example shows how to receive live quote data for stocks. To receive real time data, you will need to provide the client an asynchronous function to handle the data. The client will assign this provided method to receive the real-time data as it is available.

Finally, you will need to call the run method to start receiving data.

from alpaca.data.live import StockDataStream


wss_client = StockDataStream('api-key', 'secret-key')

# async handler
async def quote_data_handler(data):
    # quote data will arrive here
    print(data)

wss_client.subscribe_quotes(quote_data_handler, "SPY")

wss_client.run()

Trading
Alpaca offers brokerage services for equities and crypto. Equity trading is commission free while crypto trading fees are tiered. Alpaca-py allows you to place orders and manage your positions on your Alpaca brokerage account.

Paper Trading
Alpaca offers a paper trading sandbox environment so you can test out the API or paper trade your strategy before you go live. The paper trading environment is free to use. You can learn more about paper trading on the Alpaca API documentation.

To use paper trading, you will need to set the paper parameter to True when instantiating the TradingClient. Make sure the keys you are providing correspond to a paper account.

from alpaca.trading.client import TradingClient

# paper=True enables paper trading
trading_client = TradingClient('api-key', 'secret-key', paper=True)
Retrieving Account Details
You can access details about your brokerage account like how much buying power you have, whether you’ve been flagged by as a pattern day trader, your total equity.

from alpaca.trading.client import TradingClient

trading_client = TradingClient('api-key', 'secret-key')

account = trading_client.get_account()
Assets
The assets API serves a list of assets available on Alpaca for trading and data consumption. It is important to note that not all assets are tradable on Alpaca, and those assets will be marked with tradable=False. To learn more about Assets, visit the Alpaca API documentation.

Getting All Assets
Retrieves a list of assets that matches the search parameters. If there is not any search parameters provided, a list of all available assets will be returned. Search parameters for assets are defined by the GetAssetsRequest model, which allows filtering by AssetStatus, AssetClass, and AssetExchange.

from alpaca.trading.client import TradingClient
from alpaca.trading.requests import GetAssetsRequest
from alpaca.trading.enums import AssetClass

trading_client = TradingClient('api-key', 'secret-key')

# search for crypto assets
search_params = GetAssetsRequest(asset_class=AssetClass.CRYPTO)

assets = trading_client.get_all_assets(search_params)
Orders
The orders API allows you to submit orders and then manage those orders. You can customize your order with various order types, order time in forces or by creating multi-leg orders. To learn more about orders, visit the Alpaca API documentation.

Creating an Order
To create on order on Alpaca-py you must use an OrderRequest object. There are different OrderRequest objects based on the type of order you want to make. For market orders, there is MarketOrderRequest, limit orders have LimitOrderRequest, stop orders StopOrderRequest, and trailing stop orders have TrailingStopOrderRequest. Each order type have their own required parameters for a successful order.

Hint

For stocks, the notional parameter can only be used with Market orders. For crypto, the notional parameter can be used with any order type.

Market Order

A market order is an order to buy or sell a stock at the best available price. Generally, this type of order will be executed immediately. However, the price at which a market order will be executed is not guaranteed.

Market orders allow the trade of fractional shares for stocks. Fractional shares must be denoted either with a non-integer qty value or with the use of the notional parameter. The notional parameter allows you to denote the amount you wish to trade in units of the quote currency. For example, instead of trading 1 share of SPY, we can trade $200 of SPY. notional orders are inherently fractional orders.

from alpaca.trading.client import TradingClient
from alpaca.trading.requests import MarketOrderRequest
from alpaca.trading.enums import OrderSide, TimeInForce

trading_client = TradingClient('api-key', 'secret-key', paper=True)

# preparing orders
market_order_data = MarketOrderRequest(
                    symbol="SPY",
                    qty=0.023,
                    side=OrderSide.BUY,
                    time_in_force=TimeInForce.DAY
                    )

# Market order
market_order = trading_client.submit_order(
                order_data=market_order_data
               )
Limit Order

A limit order is an order to buy or sell a stock at a specific price or better. You can use the LimitOrderRequest model to prepare your order details.

from alpaca.trading.client import TradingClient
from alpaca.trading.requests import LimitOrderRequest
from alpaca.trading.enums import OrderSide, TimeInForce

trading_client = TradingClient('api-key', 'secret-key', paper=True)


limit_order_data = LimitOrderRequest(
                    symbol="BTC/USD",
                    limit_price=17000,
                    notional=4000,
                    side=OrderSide.SELL,
                    time_in_force=TimeInForce.FOK
                   )

# Limit order
limit_order = trading_client.submit_order(
                order_data=limit_order_data
              )
Getting All Orders
We can query all the orders associated with our account. It is possible to narrow the query by passing in parameters through the GetOrdersRequest model.

from alpaca.trading.client import TradingClient
from alpaca.trading.requests import GetOrdersRequest
from alpaca.trading.enums import OrderSide, QueryOrderStatus

trading_client = TradingClient('api-key', 'secret-key', paper=True)

# params to filter orders by
request_params = GetOrdersRequest(
                    status=QueryOrderStatus.OPEN,
                    side=OrderSide.SELL
                 )

# orders that satisfy params
orders = trading_client.get_orders(filter=request_params)
Cancel All Orders
We can attempt to cancel all open orders with this method. The method takes no parameters and returns a list of CancelOrderResponse objects. The cancellation of an order is not guaranteed. The CancelOrderResponse objects contain information about the cancel status of each attempted order cancellation.

from alpaca.trading.client import TradingClient

trading_client = TradingClient('api-key', 'secret-key', paper=True)

# attempt to cancel all open orders
cancel_statuses = trading_client.cancel_orders()
Positions
The positions endpoints lets you track and manage open positions in your portfolio. Learn more about the positions endpoints in the API docs.

Getting All Positions
This method requires no parameters and returns all open positions in your portfolio. It will return a list of Position objects.

from alpaca.trading.client import TradingClient

trading_client = TradingClient('api-key', 'secret-key')

trading_client.get_all_positions()
Close All Positions
This method closes all your open positions. If you set the cancel_orders parameter to True, the method will also cancel all open orders, preventing you from entering into a new position.

from alpaca.trading.client import TradingClient

trading_client = TradingClient('api-key', 'secret-key')

# closes all position AND also cancels all open orders
trading_client.close_all_positions(cancel_orders=True)
Streaming Trade Updates
There is also a TradingStream websocket client which allows you to stream order updates. Whenever an order is submitted, filled, cancelled, etc, you will receive a response on the client.

You can learn more on the API documentation

Here is an example

from alpaca.trading.stream import TradingStream

trading_stream = TradingStream('api-key', 'secret-key', paper=True)

async def update_handler(data):
    # trade updates will arrive in our async handler
    print(data)

# subscribe to trade updates and supply the handler as a parameter
trading_stream.subscribe_trade_updates(update_handler)

# start our websocket streaming
trading_stream.run()

can you please replace everything in alpaca.py to use this sdk? 